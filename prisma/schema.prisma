// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Prisma is a type-safe bridge that converts JS/TS code into SQL to interact with the database.
// Prisma takes your JavaScript/TypeScript code (like prisma.issue.create(...)) and converts it into the correct SQL for your database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Issue {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           Status   @default(OPEN)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedToUserId String? // to track who the issue is assigned to
  assignedTo       User?    @relation("IssueAssignedTo", fields: [assignedToUserId], references: [id], onDelete: SetNull) // Named relation
  createdById      String?
  createdBy        User?    @relation("IssueCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]   @relation("IssueAssignedTo") // back-relation for Issue.assignedTo
  Issue          Issue[]   @relation("IssueCreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
